on:
  push:
    branches:
      - main
      - uat
      - test
      - prod

jobs:
  deploy-frontend:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
      # Checkout the code from the repository

    - name: Set up Docker Builder
      uses: docker/setup-buildx-action@v3
      # Set up Docker buildx for multi-platform support

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1
      # Use AWS credentials stored in GitHub secrets for authentication

    - name: Authenticate with AWS ECR
      uses: aws-actions/amazon-ecr-login@v1
      # Authenticate Docker to AWS ECR

    - name: Set Image Tag
      run: |
        echo "IMAGE_TAG=$(date +%s)" >> $GITHUB_ENV
      # Generate a unique image tag using the current timestamp

    - name: Build and Push Image to ECR
      env:
        AWS_REGION: ap-south-1
        ECR_REPOSITORY: react-app
      run: |
        docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REPOSITORY:$IMAGE_TAG 401544946555.dkr.ecr.ap-south-1.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG
        docker push 401544946555.dkr.ecr.ap-south-1.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG
      # Build and push Docker image to AWS ECR

    - name: Set Namespace Based on Branch
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/uat" ]]; then
          echo "NAMESPACE=uat" >> $GITHUB_ENV
        elif [[ "${{ github.ref }}" == "refs/heads/test" ]]; then
          echo "NAMESPACE=test" >> $GITHUB_ENV
        elif [[ "${{ github.ref }}" == "refs/heads/prod" ]]; then
          echo "NAMESPACE=prod" >> $GITHUB_ENV
        else
          echo "NAMESPACE=default" >> $GITHUB_ENV
        fi
      # Set the namespace based on the branch name (uat, test, prod, or default)

    - name: Debug Namespace Setting
      run: echo "Namespace: $NAMESPACE"
      # Debugging step to check the value of the NAMESPACE environment variable

    - name: Configure Kubernetes Context
      run: |
        echo "${{ secrets.KUBECONFIG }}" | base64 -d > kubeconfig.yaml
        export KUBECONFIG=$PWD/kubeconfig.yaml
        kubectl config current-context || echo "⚠️ Warning: current-context not set!"
      # Configure Kubernetes context for kubectl commands

    - name: Debug Kubernetes Connection
      run: |
        kubectl get pods -A
        kubectl config view
      # Debug Kubernetes connection and view cluster configuration

    - name: Update Image in Deployment File
      run: |
        sed -i "s|image:.*|image: 401544946555.dkr.ecr.ap-south-1.amazonaws.com/react-app:$IMAGE_TAG|g" deployment.yaml
      # Update the deployment file with the new image tag

    - name: Debug Deployment File
      run: cat deployment.yaml
      # Debugging step to print the deployment file content

    - name: Validate Deployment before Applying
      run: |
        kubectl apply -f deployment.yaml -n $NAMESPACE --dry-run=client
      # Validate the deployment configuration before applying

    - name: Deploy Application to Kubernetes
      run: |
        kubectl apply -f deployment.yaml -n $NAMESPACE --validate=false
        kubectl rollout status deployment/react-app -n $NAMESPACE
      # Deploy the application to Kubernetes and check deployment status

    - name: Check Deployment Status
      run: |
        kubectl rollout status deployment/react-app -n $NAMESPACE
      # Check if the deployment was successful

    - name: Check Pod Status
      run: |
        kubectl get pods -n $NAMESPACE
      # Check the status of the pods in the Kubernetes namespace

    - name: Check Services Status
      run: |
        kubectl get svc -n $NAMESPACE
      # Check the status of the services in the Kubernetes namespace

